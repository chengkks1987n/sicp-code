;;; exercise 3.1
(define (make-accumulator value)
  (lambda (acc)
    (begin (set! value (+ value acc))
	   value)))

(define A (make-accumulator 5))
(A 10)
(A 10)
(A 3)
(define B (make-accumulator 3))
(B 10)
(B 10)
(B 3)

;;; exercise 3.2
(define (make-monitored f)
  (let ((call-times 0))
    (lambda (input)
      (cond ((eq? input 'how-many-call) call-times)
	    ((eq? input 'reset-count) (set! call-times 0)  call-times)
	    (else (set! call-times (+ 1 call-times)) (f input))))))

(define s (make-monitored sqrt))
(s 2)
(s 'how-many-call)
(s 3)
(s 'reset-count)

;;; exercise 3.3
(define (make-account balance password)
  (define (withdraw amount)
    (cond ((>= balance amount) (set! balance (- balance amount)) balance)
	  (else "insufficent balance")))
  (define (deposit amount)
    (begin (set! balance (+ amount balance)) balance))
  (lambda (psd op)
    (cond ((eq? psd password) 
	   (cond ((eq? op 'withdraw) withdraw)
		 ((eq? op 'deposit) deposit)
		 (else (lambda (amount) "undefined operation"))))
	  (else (lambda (amount) "uncorrect password")))))

(define acc (make-account 100 'my-password))
((acc 'my-password 'withdraw) 35)
((acc 'my-password 'withdraw) 35)
((acc 'my-passd 'withdraw) 35)    
((acc 'my-password 'haha) 23)
((acc 'my-password 'deposit) 23)

;;; exercise 3.4
(define (make-account balance password)
  (define (withdraw amount)
    (cond ((>= balance amount) (set! balance (- balance amount)) balance)
	  (else "insufficent balance")))
  (define (deposit amount)
    (begin (set! balance (+ amount balance)) balance))
  (let ((error-count 0))
    (lambda (psd op)
      (cond ((eq? psd password) 
	     (set! error-count 0)
	     (cond ((eq? op 'withdraw) withdraw)
		   ((eq? op 'deposit) deposit)
		   (else (lambda (amount) "undefined operation"))))
	    (else
	     (set! error-count (+ 1 error-count))
	     (if (>= error-count 7)
		 (lambda (amount)
		   "uncorrect password for 7 times, call the police")
		 (lambda (amount) "uncorrect password")))))))

(define acc (make-account 100 'my-password))
((acc 'my-password 'withdraw) 35)
((acc 'my-password 'withdraw) 35)
((acc 'my-passd 'withdraw) 35)    
((acc 'my-password 'haha) 23)
((acc 'my-password 'deposit) 23)
