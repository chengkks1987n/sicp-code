(define nil (list))

(define (inform-except item lst message)
  (if (not (null? lst))
      (if (eq? item (car lst))
	  (inform-except item (cdr lst) message)
	  (begin ((car lst) message)
		 (inform-except item (cdr lst) message)))))

;-------------------------------------------------------------------

(define (make-connector)
  (let ((value nil)
	(setter nil)
	(constraints nil))
    (define (get-my-value)
      (if (has-value? me) value))
    (define (has-my-value?) (not (null? setter)))
    (define (forget-my-value! new-setter)
      (if (eq? setter new-setter)
	  (begin (set! setter nil)
		 (Set! value nil)
		 (inform-except setter constraints 'I-lost-my-value))))
     (define (set-my-value! new-value new-setter)
       (if (has-my-value?)
	   (if (not (eq? new-value value))
	       (begin (display "I already have a value :")
		      (display value)
		      (display "->")
		      (display new-value)))
	   (begin (set! value new-value)
		  (set! setter new-setter)
		  (inform-except setter constraints 'I-hava-a-value))))
     (define (connect-my constr)
       (if (not (memq cons constraints))
	   (begin (set! constraints (cons constr constraints))
		  (if (has-my-value?)
		      (cons 'I-have-a-value)))))
     (define (me request)
       (cond ((eq? request 'get-value) (get-my-value))
	     ((eq? request 'set-value!) set-my-value!)
	     ((eq? request 'has-value?) (has-my-value?))
	     ((eq? request 'forget-value!) forget-my-value!)
	     ((eq? request 'connect-my) connect-my)
	     (else (error "unknow request -- MAKE-CONNECTOR:" request))))
     me))

 (define (get-value c) (c 'get-value))
 (define (set-value! c value setter) ((c 'set-value!) value setter))
 (define (has-value? c) (c 'has-value?))
 (define (forget-value! c setter) ((c 'forget-value!) setter))
 (define (connect c constraint) ((c 'connect-my) constraint))

 ;------------------------------------------------------------------

 (define (adder a b c)
   (define (process-new-value)
     (cond ((and (has-value? a) (has-value? b))
	    (set-value! c (+ (get-value a) (get-value b)) me))
	   ((and (has-value? a) (has-value? c))
	    (set-value! b (- (get-value c) (get-value a)) me))
	   ((and (has-value? b) (has-value? c))
	    (set-value! a (- (get-value c) (get-value b)) me))
	   (else 'ignore)))

   (define (process-forget-value)
     (forget-value! a me)
     (forget-value! b me)
     (forget-value! c me)
     (process-new-value))
   (define (me request)
     (cond ((eq? request 'I-hava-a-value) (process-new-value))
	   ((eq? request 'I-lost-my-value) (process-forget-value))
	   (else (error "unknow request --ADDER:" request))))
   (connect a me)
   (connect b me)
   (connect c me)
   (process-new-value)

   me)

 (define (multiplier a b c)
   (define (process-new-value)
     (cond ((and (has-value? a) (= 0 (get-value a)))
	    (set-value! c 0 me))
	   ((and (has-value? b) (= 0 (get-value b)))
	    (set-value! c 0 me))
	   ((and (has-value? a) (has-value? b))
	    (set-value! c (* (get-value a) (get-value b)) me))
	   ((and (has-value? a) (has-value? c))
	    (set-value! b (/ (get-value c) (get-value a)) me))
	   ((and (has-value? b) (has-value? c))
	    (set-value! a (/ (get-value c) (get-value b)) me))
	   (else 'ignore)))
   (define (process-forget-value)
     (forget-value! a me)
     (forget-value! b me)
     (forget-value! c me)
     (process-new-value))
   (define (me request)
     (cond ((eq? request 'I-hava-a-value) (process-new-value))
	   ((eq? request 'I-lost-my-value) (process-forget-value))
	   (else (error "unknow request --ADDER:" request))))
   (connect a me)
   (connect b me)
   (connect c me)
   (process-new-value)
   me)


 (define (constant v a)
   (define (me request)
     (cond ((eq? request 'I-hava-a-value) nil)
	   ((eq? request 'I-lost-my-value) nil)
	   (else (error "unknow request --ADDER:" request))))
   (connect a me)
   (set-value! a v me)
   me)

 ;;;;;;;;;;;;;;;;;;;

 (define cc (make-connector))
 (define ff (make-connector))
 (define (celsius-fahrenheit-converter c f)
   (let ((u (make-connector))
	 (v (make-connector))
	 (w (make-connector))
	 (x (make-connector))
	 (y (make-connector)))
     (multiplier c w u)
     (multiplier v x u)
     (adder v y f)
     (constant 9 w)
     (constant 5 x)
     (constant 32 y)
     'ok))

 (celsius-fahrenheit-converter cc ff)
 (set-value! cc 25 'user)
 (get-value cc)
 (get-value ff)
 (set-value! ff 212 'user)
(forget-value! cc 'user)
(set-value! ff 212 'user)
